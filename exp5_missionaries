from collections import deque0
MAX_MISSIONARIES = 3
MAX_CANNIBALS = 3
INITIAL_STATE = (3, 3, 1)
GOAL_STATE = (0, 0, 0)
def is_valid(state):
    m, c, b = state
    return 0 <= m <= MAX_MISSIONARIES and 0 <= c <= MAX_CANNIBALS and (m >= c or m == 0) and (MAX_MISSIONARIES - m >= MAX_CANNIBALS - c or MAX_MISSIONARIES - m == 0)

def generate_next_states(state):
    m, c, b = state
    possibilities = [(m - x, c - y, 1 - b) for x in range(3) for y in range(3) if 1 <= x + y <= 2]
    return [s for s in possibilities if is_valid(s)]

def bfs():
    visited = set()
    queue = deque([(INITIAL_STATE, [])])
    while queue:
        state, path = queue.popleft()
        if state == GOAL_STATE:
            return path
        visited.add(state)
        for next_state in generate_next_states(state):
            if next_state not in visited:
                queue.append((next_state, path + [next_state]))
    return None

def main():
    solution_path = bfs()
    if solution_path:
        print("Solution:")
        for state in solution_path:
            print(state)
    else:
        print("No solution found.")

if __name__ == "__main__":
    main()
